apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: "io.objectbox"

def getVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--all', '--count'
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim())
    }
    catch (ignored) {
        return -1;
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
//          commandLine 'git', 'describe', '--tags', '--always', '--dirty', '--match', 'hin2n_v*'
            commandLine 'git', 'describe', '--tags', '--always', '--match', 'hin2n_v*'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}

def getEnvOrConsole = { env, prompt ->
    def val = null
    try {
        val = System.getenv(env)
        if (val == null || val == "") {
            if (System.console() != null) {
                val = System.console().readLine("\n" + prompt + ": ")
            }
        }
    } catch (ignored) {
        return null
    }
    return val
}

def getManifestValues = { id_key, variant ->
    def val = true
    def id = getEnvOrConsole(id_key, id_key)
    if (id == null || id == "") {
        gradle.println(id_key + " is not set")
        val = false
    } else {
        if (variant) {
            variant.mergedFlavor.manifestPlaceholders.put(id_key + "_VALUE", id)
        }
    }

    return val
}

def getAllManifestValues = { variant ->
    def v1 = getManifestValues("UMENG_APPKEY", variant)
    def v2 = getManifestValues("BUGLY_APPID", variant)
    def v3 = getManifestValues("SHARE_WX_APPID", variant)
    def v4 = getManifestValues("SHARE_WX_APPSECRET", variant)
    def v5 = getManifestValues("SHARE_WB_APPID", variant)
    def v6 = getManifestValues("SHARE_WB_APPSECRET", variant)

    return v1 && v2
}

android {
    compileSdkVersion 33
    defaultConfig {
        applicationId "com.evan.hin2n"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode getVersionCode()
        versionName getVersionName()
        multiDexEnabled true
        manifestPlaceholders = [UMENG_CHANNEL_VALUE: "normal", ARCH: "all", UMENG_APPKEY_VALUE: "", BUGLY_APPID_VALUE: "",
                                SHARE_WX_APPID_VALUE: "", SHARE_WX_APPSECRET_VALUE: "",
                                SHARE_WB_APPID_VALUE: "", SHARE_WB_APPSECRET_VALUE: ""]
        resConfigs "en", "zh-rCN", "zh-rTW"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        externalNativeBuild {
            cmake {
                cppFlags ""
                cFlags "-D__ANDROID_NDK__"
            }
        }
    }

    signingConfigs {
        debug {}

        release {
            storeFile file("evan.jks")
            storePassword "123456"
            keyAlias "evan"
            keyPassword "123456"
        }
    }

    buildTypes {
        debug {
            buildConfigField("boolean", "LOG_DEBUG", "true")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }

        release {
            buildConfigField("boolean", "LOG_DEBUG", "false")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
        }
    }



    flavorDimensions "channel", "arch"

    productFlavors {
        normal {
            dimension "channel"
            manifestPlaceholders += [UMENG_CHANNEL_VALUE: "normal"]
        }
//        github {
//            dimension "channel"
//            manifestPlaceholders += [UMENG_CHANNEL_VALUE: "github"]
//        }
//        bugly {
//            dimension "channel"
//            manifestPlaceholders += [UMENG_CHANNEL_VALUE: "bugly"]
//        }
        arm {
            dimension "arch"
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
                manifestPlaceholders += [ARCH: "arm"]
            }
        }
        x86 {
            dimension "arch"
            ndk {
                abiFilters "x86", "x86_64"
                manifestPlaceholders += [ARCH: "x86"]
            }
        }
        allarch {
            dimension "arch"
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
                manifestPlaceholders += [ARCH: "allarch"]
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.4.3"
    }

    ndkVersion '21.1.6352462'
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.google.android.material:material:1.5.0'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.google.code.gson:gson:2.10.1'
    testImplementation 'junit:junit:4.12'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'org.greenrobot:eventbus:latest.integration'
    implementation 'com.wang.avi:library:2.1.3'
    implementation 'com.orhanobut:logger:1.15'
    implementation 'com.yanzhenjie:permission:2.0.3'
    //object box
    implementation "io.objectbox:objectbox-android:3.5.1"
    implementation "io.objectbox:objectbox-kotlin:3.5.1"
    annotationProcessor "io.objectbox:objectbox-processor:3.5.1"
    //kotlin support
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.10"
    implementation "androidx.core:core-ktx:1.10.0"
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "androidx.activity:activity-ktx:1.7.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.6.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"
    //compose
    def composeBom = platform('androidx.compose:compose-bom:2023.01.00')
    implementation composeBom
    androidTestImplementation composeBom
    implementation 'androidx.compose.material:material'
    // or skip Material Design and build directly on top of foundational components
    implementation 'androidx.compose.foundation:foundation'
    // or only import the main APIs for the underlying toolkit systems,
    // such as input and measurement/layout
    implementation 'androidx.compose.ui:ui'

    // Android Studio Preview support
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    // custom design system based on Foundation)
    implementation 'androidx.compose.material:material-icons-core'
    // Optional - Add full set of material icons
    implementation 'androidx.compose.material:material-icons-extended'
    implementation ('androidx.activity:activity-compose:1.7.1')
    // Optional - Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.5.1'
    //ext
    implementation 'com.google.accompanist:accompanist-navigation-animation:0.28.0'
    implementation "com.gyf.immersionbar:immersionbar:3.0.0"
    implementation "com.gyf.immersionbar:immersionbar-ktx:3.0.0"

}
